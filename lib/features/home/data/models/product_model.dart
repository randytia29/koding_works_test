import 'package:kodingworkstest/features/home/data/models/size_model.dart';
import 'package:kodingworkstest/features/home/data/models/reseller_configs_model.dart';
import 'package:kodingworkstest/features/home/data/models/location_model.dart';
import 'package:kodingworkstest/features/home/data/models/image_model.dart';
import 'package:kodingworkstest/features/home/data/models/custom_price_config_model.dart';
import 'package:kodingworkstest/features/home/data/models/category_model.dart';
import 'package:kodingworkstest/features/home/domain/entities/product.dart';

class ProductModel extends Product {
  const ProductModel(
      {required String id,
      required String type,
      required String checkoutType,
      required String name,
      required String description,
      required String status,
      required List<CategoryModel> categories,
      required ImageModel image,
      required List<String> images,
      required int price,
      required String? promoPriceType,
      required bool isFeatured,
      required bool isPromo,
      required int promoPrice,
      required int regularPrice,
      required DateTime? promoStartDate,
      required DateTime? promoEndDate,
      required List<LocationModel> locations,
      required bool isAvailableInAllLocation,
      required String unit,
      required int priority,
      required SizeModel size,
      required int weight,
      required int cogs,
      required String sku,
      required bool isAvailableWhenOutOfStock,
      required bool isPhysicalProduct,
      required bool isTrackInventory,
      required bool isResellerAvailable,
      required ResellerConfigsModel resellerConfigs,
      required bool isCustomPriceAvailable,
      required CustomPriceConfigModel customPriceConfig,
      required String slug,
      required bool isWholesalePriceAvailable,
      required List<int> wholesalePrices,
      required int minimumOrderQuantity,
      required int maximumOrderQuantity,
      required int averageRating,
      required bool onStock,
      required int quantity,
      required int totalSales,
      required int totalOrderedItems,
      required int totalOrders})
      : super(
            id: id,
            type: type,
            checkoutType: checkoutType,
            name: name,
            description: description,
            status: status,
            categories: categories,
            image: image,
            images: images,
            price: price,
            promoPriceType: promoPriceType,
            isFeatured: isFeatured,
            isPromo: isPromo,
            promoPrice: promoPrice,
            regularPrice: regularPrice,
            promoStartDate: promoStartDate,
            promoEndDate: promoEndDate,
            locations: locations,
            isAvailableInAllLocation: isAvailableInAllLocation,
            unit: unit,
            priority: priority,
            size: size,
            weight: weight,
            cogs: cogs,
            sku: sku,
            isAvailableWhenOutOfStock: isAvailableWhenOutOfStock,
            isPhysicalProduct: isPhysicalProduct,
            isTrackInventory: isTrackInventory,
            isResellerAvailable: isResellerAvailable,
            resellerConfigs: resellerConfigs,
            isCustomPriceAvailable: isCustomPriceAvailable,
            customPriceConfig: customPriceConfig,
            slug: slug,
            isWholesalePriceAvailable: isWholesalePriceAvailable,
            wholesalePrices: wholesalePrices,
            minimumOrderQuantity: minimumOrderQuantity,
            maximumOrderQuantity: maximumOrderQuantity,
            averageRating: averageRating,
            onStock: onStock,
            quantity: quantity,
            totalSales: totalSales,
            totalOrderedItems: totalOrderedItems,
            totalOrders: totalOrders);

  factory ProductModel.fromJson(Map<String, dynamic> json) => ProductModel(
        id: json["id"],
        type: json["type"],
        checkoutType: json["checkoutType"],
        name: json["name"],
        description: json["description"],
        status: json["status"],
        categories: List<CategoryModel>.from(
            json["categories"].map((x) => CategoryModel.fromJson(x))),
        image: ImageModel.fromJson(json["image"]),
        images: List<String>.from(json["images"].map((x) => x)),
        price: json["price"],
        promoPriceType: json["promoPriceType"],
        isFeatured: json["isFeatured"],
        isPromo: json["isPromo"],
        promoPrice: json["promoPrice"],
        regularPrice: json["regularPrice"],
        promoStartDate: DateTime.parse(json["promoStartDate"]),
        promoEndDate: DateTime.parse(json["promoEndDate"]),
        locations: List<LocationModel>.from(
            json["locations"].map((x) => LocationModel.fromJson(x))),
        isAvailableInAllLocation: json["isAvailableInAllLocation"],
        unit: json["unit"],
        priority: json["priority"],
        size: SizeModel.fromJson(json["size"]),
        weight: json["weight"],
        cogs: json["cogs"],
        sku: json["sku"],
        isAvailableWhenOutOfStock: json["isAvailableWhenOutOfStock"],
        isPhysicalProduct: json["isPhysicalProduct"],
        isTrackInventory: json["isTrackInventory"],
        isResellerAvailable: json["isResellerAvailable"],
        resellerConfigs: ResellerConfigsModel.fromJson(json["resellerConfigs"]),
        isCustomPriceAvailable: json["isCustomPriceAvailable"],
        customPriceConfig:
            CustomPriceConfigModel.fromJson(json["customPriceConfig"]),
        slug: json["slug"],
        isWholesalePriceAvailable: json["isWholesalePriceAvailable"],
        wholesalePrices: List<int>.from(json["wholesalePrices"].map((x) => x)),
        minimumOrderQuantity: json["minimumOrderQuantity"],
        maximumOrderQuantity: json["maximumOrderQuantity"],
        averageRating: json["averageRating"],
        onStock: json["onStock"],
        quantity: json["quantity"],
        totalSales: json["totalSales"],
        totalOrderedItems: json["totalOrderedItems"],
        totalOrders: json["totalOrders"],
      );

  Map<String, dynamic> toJson() => {
        "id": id,
        "type": type,
        "checkoutType": checkoutType,
        "name": name,
        "description": description,
        "status": status,
        "categories": List<dynamic>.from(categories.map((x) => x.toJson())),
        "image": image.toJson(),
        "images": List<dynamic>.from(images.map((x) => x)),
        "price": price,
        "promoPriceType": promoPriceType,
        "isFeatured": isFeatured,
        "isPromo": isPromo,
        "promoPrice": promoPrice,
        "regularPrice": regularPrice,
        "promoStartDate": promoStartDate?.toIso8601String(),
        "promoEndDate": promoEndDate?.toIso8601String(),
        "locations": List<dynamic>.from(locations.map((x) => x.toJson())),
        "isAvailableInAllLocation": isAvailableInAllLocation,
        "unit": unit,
        "priority": priority,
        "size": size.toJson(),
        "weight": weight,
        "cogs": cogs,
        "sku": sku,
        "isAvailableWhenOutOfStock": isAvailableWhenOutOfStock,
        "isPhysicalProduct": isPhysicalProduct,
        "isTrackInventory": isTrackInventory,
        "isResellerAvailable": isResellerAvailable,
        "resellerConfigs": resellerConfigs.toJson(),
        "isCustomPriceAvailable": isCustomPriceAvailable,
        "customPriceConfig": customPriceConfig.toJson(),
        "slug": slug,
        "isWholesalePriceAvailable": isWholesalePriceAvailable,
        "wholesalePrices": List<dynamic>.from(wholesalePrices.map((x) => x)),
        "minimumOrderQuantity": minimumOrderQuantity,
        "maximumOrderQuantity": maximumOrderQuantity,
        "averageRating": averageRating,
        "onStock": onStock,
        "quantity": quantity,
        "totalSales": totalSales,
        "totalOrderedItems": totalOrderedItems,
        "totalOrders": totalOrders,
      };
}
